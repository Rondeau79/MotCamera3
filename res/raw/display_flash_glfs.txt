precision mediump float;
varying vec4 v_Color;
varying vec4 v_TopColor;
varying vec2 v_Position;
uniform vec2 u_MiddleSize;
uniform float u_Opacity;
uniform float u_OpacityTop;
uniform float u_OpacityBottom;
uniform float u_Radius;
uniform vec2 u_Size;
uniform vec2 u_HollowSize;
uniform float u_HollowTop;
uniform float u_TopGuide;
uniform float u_BottomGuide;

float udRoundRect(vec2 p, vec2 b, float r)
{
    return length(max(abs(p) - b, 0.0)) - r;
}

void main() {
    vec2 pos = v_Position;
    float rad = u_Radius;
    vec2 size = u_Size ;
    float dis = udRoundRect(pos, size - rad, rad);
    float alpha = clamp(dis, 0.0, 1.0);
    float yTranslation = u_TopGuide - u_MiddleSize.y;
    float hollowBottom = u_HollowTop - u_HollowSize.y * 2.0;
    if (pos.y < u_TopGuide && pos.y > u_BottomGuide) {
        vec2 middleSize = vec2(u_MiddleSize.x, u_MiddleSize.y + yTranslation);
        float dis1 = 0.0;
        if (u_MiddleSize.x > 0.0) {
            dis1 = udRoundRect(pos, middleSize - rad, rad);
        }
        if (dis1 >= 0.0 && pos.y >= (u_TopGuide - rad)) {
            gl_FragColor = mix(v_TopColor * v_TopColor.a * u_OpacityTop, vec4(0.0, 0.0, 0.0, 0.0), alpha);
        } else if (abs(pos.x) <= u_HollowSize.x && (pos.y <= u_HollowTop && pos.y >= hollowBottom)) {
            discard;
        } else {
            gl_FragColor = mix(v_Color * v_Color.a * u_Opacity, vec4(0.0, 0.0, 0.0, 0.0), alpha);
            middleSize = vec2(u_MiddleSize.x, u_MiddleSize.y - yTranslation);
            if (u_MiddleSize.x > 0.0) {
                dis1 = udRoundRect(pos, middleSize - rad, rad);
            }
            if (dis1 >= 0.0 && pos.y <= (u_BottomGuide + rad)) {
                gl_FragColor = mix(v_Color * v_Color.a * u_OpacityBottom, vec4(0.0, 0.0, 0.0, 0.0), alpha);
            }
        }
    } else if (pos.y >= u_TopGuide) {
        gl_FragColor = mix(v_TopColor * v_TopColor.a * u_OpacityTop, vec4(0.0, 0.0, 0.0, 0.0), alpha);
    } else if (pos.y <= u_BottomGuide) {
        gl_FragColor = mix(v_Color * v_Color.a * u_OpacityBottom, vec4(0.0, 0.0, 0.0, 0.0), alpha);
    } else {
        discard;
    }
}
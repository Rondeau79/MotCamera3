#extension GL_OES_EGL_image_external : require
precision mediump float;
varying vec2 v_TextureCoord;
uniform samplerExternalOES u_Texture;
uniform float u_Alpha;

// 3D lookup table to apply.
uniform sampler2D u_TextureLookupTable;

// Number of looks side by side in the texture.
uniform float u_LooksCount;

// Index of look we want to use (for single tile view only).
uniform float u_LookIndex;

// Whether the look should be treated as grayscale.
uniform float u_LookIsGrayscale;

// Lookup size in each of the three dimensions.
const float kLookupSize = 17.0;

vec3 ApplyLookup(vec3 color,
                 sampler2D lookup_table,
                 float lut_index,
                 float is_grayscale,
                 float luts_count) {
    vec3 clamped = clamp(color, vec3(0.0), vec3(1.0));

    float blue_coord = (kLookupSize - 1.0) * clamped.b;
    float blue_coord_low = clamp(floor(blue_coord), 0.0, kLookupSize - 2.0);

    float lower_y =
        (0.5 + blue_coord_low * kLookupSize + clamped.g * (kLookupSize - 1.0)) /
        (kLookupSize * kLookupSize);
    float upper_y = lower_y + 1.0 / kLookupSize;

    float x = 0.5 + kLookupSize * lut_index + clamped.r * (kLookupSize - 1.0);
    x = (x + kLookupSize * lut_index) / 2.0;

    x /= kLookupSize * luts_count;
    vec3 lower_rgb = texture2D(lookup_table, vec2(x, lower_y)).rgb;
    vec3 upper_rgb = texture2D(lookup_table, vec2(x, upper_y)).rgb;
    float frac_b = blue_coord - blue_coord_low;

    if (is_grayscale > 0.5) {
        color = vec3(0.3 * color.r + 0.59 * color.g + 0.11 * color.b);
    }
    return mix(color, mix(lower_rgb, upper_rgb, frac_b), 1.0);
}

void main() {
    vec4 fragColor = texture2D(u_Texture, v_TextureCoord);
    gl_FragColor = vec4(ApplyLookup(fragColor.rgb, u_TextureLookupTable, u_LookIndex,
        u_LookIsGrayscale, u_LooksCount), fragColor.a) * u_Alpha;
}

precision mediump float;
varying highp vec2 v_TextureCoord;
uniform sampler2D u_Texture;
uniform float u_Opacity;
uniform vec4 u_ColorBackground;
uniform int u_Mask;
uniform int u_ColorChange;
uniform vec4 u_ShapeChange; // x = texture aspect ratio, y = geometry aspect ratio, z = x radius, w = y radius

void main() {
    if (u_ShapeChange.x > 0.0) {
        vec2 textureCoord0 = 2.0 * abs(v_TextureCoord - vec2(0.5, 0.5));
        textureCoord0.x *= u_ShapeChange.x;
        vec2 cropCoord0 = vec2(u_ShapeChange.x, 1.0);
        if (u_ShapeChange.y > u_ShapeChange.x) cropCoord0.y = cropCoord0.x / u_ShapeChange.y;
        if (u_ShapeChange.y < u_ShapeChange.x) cropCoord0.x = cropCoord0.y * u_ShapeChange.y;
        if (any(greaterThan(textureCoord0, cropCoord0))) discard;
        if (all(greaterThan(u_ShapeChange.zw, vec2(0.0, 0.0)))) {
            vec2 innerRectCoord0 = cropCoord0 - u_ShapeChange.zw;
            vec2 relativeCoord0 = textureCoord0 - innerRectCoord0;
            if (all(greaterThan(relativeCoord0, vec2(0.0, 0.0)))) {
                if (length(relativeCoord0 / u_ShapeChange.zw) > 1.0) discard;
            }
        }
    }

    vec4 sample = texture2D(u_Texture, v_TextureCoord);


    if (u_Mask == 0) {
        sample *= u_Opacity;
        gl_FragColor = sample + ((1.0 - sample.a) * u_ColorBackground);
    } else {
        if(u_ColorChange == 1){
          float dstAlpha = sample.a;
          sample.a = u_ColorBackground.a * dstAlpha;
          sample.rgb = u_ColorBackground.rgb * dstAlpha;
          sample *= u_Opacity;
          gl_FragColor = sample;
        }else{
        //Acquire alpha from bitmap mask and invert it
        float alpha = 1.0 - sample.a;
        alpha *= u_ColorBackground.a * u_Opacity;
        alpha = clamp(alpha, 0.0, 1.0);

        if (alpha < .001) discard;
        else gl_FragColor = u_ColorBackground * alpha;
        }
    }
}
